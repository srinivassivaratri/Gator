// Code generated by sqlc. DO NOT EDIT.
// This file contains type-safe database operations

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// SQL query to create a new user
const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, created_at, updated_at, name
`

// Parameters needed to create a user
// Matches the SQL query parameters above
type CreateUserParams struct {
	ID        uuid.UUID  // Unique identifier
	CreatedAt time.Time  // When user was created
	UpdatedAt time.Time  // When user was last modified
	Name      string     // Username
}

// CreateUser adds a new user to database
// Returns the created user or error
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	// Execute SQL with our parameters
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	
	// Parse returned row into User struct
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

// SQL to delete all users
const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

// DeleteAllUsers removes all users from database
func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

// SQL to get all users
const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, name FROM users
`

// GetAllUsers returns all users in database
func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	// Execute query
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// Parse all returned rows
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	
	// Check for errors during iteration
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	
	return items, nil
}

// SQL to find user by name
const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name FROM users
WHERE name = $1
`

// GetUser finds a user by their name
func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	// Execute query with username
	row := q.db.QueryRowContext(ctx, getUser, name)
	
	// Parse returned row into User struct
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
